#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/behaviors.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10


/ {
   // Activate ADJUST layer by pressing raise and lower
    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    macros {
        ctrl_alt_combo: ctrl_alt_combo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LCTRL &kp LALT>
            , <&macro_pause_for_release>
            , <&macro_release &kp LALT &kp LCTRL>
            ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Default";
            bindings = <
&kp ESC   &kp N1 &kp N2   &kp N3   &kp N4    &kp N5                           &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &kp RET
&kp TAB   &kp Q  &kp W    &kp E    &kp R     &kp T                            &kp Y  &kp U     &kp I     &kp O    &kp P    &kp BSPC
&kp EQUAL &kp A  &kp S    &kp D    &kp F     &kp G                            &kp H  &kp J     &kp K     &kp L    &kp SEMI &kp SQT
&kp LBKT  &kp Z  &kp X    &kp C    &kp V     &kp B                            &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH &kp RBKT
                        &ctrl_alt_combo &kp LCTRL  &kp LALT             &kp SPACE  &kp LSHFT  &mo LOWER
                                        &kp MINUS  &kp BSLH             &kp DEL    &kp LGUI
            >;
        };

        raise_layer {
            display-name = "Raise";
            bindings = <
&kp TILDE &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
&trans    &kp C_PREVIOUS   &kp C_PP   &kp C_NEXT  &trans  &trans     &trans      &trans    &trans    &trans   &trans    &trans
&trans    &kp C_VOL_DN   &kp C_VOL_UP &kp C_MUTE  &trans  &trans     &kp LEFT    &kp DOWN  &kp UP   &kp RIGHT &trans    &trans
&trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
                        &trans  &trans  &trans                       &trans      &trans    &trans
                        &bootloader  &sys_reset                      &trans      &trans        
            >;
        };

        lower_layer {
            display-name = "Lower";
            bindings = <
&trans      &kp F1       &kp F2          &kp F3           &kp F4           &kp F5                          &kp F6    &kp F7    &kp F8    &kp F9     &kp F10   &kp F11
&trans      &trans       &mkp RCLK       &mmv MOVE_UP     &mkp LCLK        &trans                          &trans    &trans    &trans    &trans     &trans    &kp F12
&trans      &trans       &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &trans                          &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans    &trans
&bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1    &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                    &trans    &trans    &trans    &trans     &trans    &trans
                        &trans  &trans  &trans                       &trans      &trans    &trans
                                &trans  &trans                       &bootloader &sys_reset          
            >;
        };
        system_layer {
            display-name = "System";
            bindings = <
&bt BT_CLR &bt BT_SEL 0     &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3 &bt BT_SEL 4                 &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
&trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
&trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
                        &trans  &trans  &trans                       &trans      &trans    &trans
                                &trans  &trans                       &trans      &trans          
            >;
        };
    };
};
